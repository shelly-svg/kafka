version: '3.8'
services:
  zookeeper-server-1:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper-server-1
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka-broker-1
    hostname: kafka1
    ports:
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://kafka1:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 10
    depends_on:
      - zookeeper-server-1

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka-broker-2
    hostname: kafka2
    ports:
      - '9093:9093'
    environment:
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://kafka2:9093
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 10
    depends_on:
      - zookeeper-server-1

  kafka-broker-3:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka-broker-3
    hostname: kafka3
    ports:
      - '9094:9094'
    environment:
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://kafka3:9094
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 10
    depends_on:
      - zookeeper-server-1

  init-kafka:
    image: confluentinc/cp-kafka:7.2.2
    container_name: init-kafka
    depends_on:
      - kafka-broker-1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Blocks until kafka is reachable'
      kafka-topics --bootstrap-server kafka1:19092 --list

      echo -e 'Creating kafka topics ...'
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic com-example-users --replication-factor 3 --partitions 10
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic com-example-users-retry --replication-factor 3 --partitions 10
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic com-example-dlq --replication-factor 3 --partitions 10

      echo -e 'Successfully created topics, list of the topics:'
      kafka-topics --bootstrap-server kafka1:19092 --list
      "

#  kafka-connect:
#    image: kafka-connect
#    container_name: kafka-connect
#    ports:
#      - '8083:8083'
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: kafka1:19092
#      CONNECT_REST_ADVERTISED_HOST_NAME: connect
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
#      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
#    depends_on:
#      - kafka-broker-1

  postgres:
    image: postgres:15.1
    container_name: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: auth-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  pg-admin:
    image: dpage/pgadmin4:6.18
    container_name: pg-admin
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: test@gmail.com
      PGADMIN_DEFAULT_PASSWORD: postgres

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    ports:
      - '8070:8080'
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka1:19092"
              connect:
                - name: "connect"
                  url: "http://host.docker.internal:8083"
    links:
      - kafka-broker-1